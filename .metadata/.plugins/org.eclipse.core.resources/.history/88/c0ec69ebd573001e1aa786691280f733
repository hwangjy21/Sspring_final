package com.myweb.www.controller;

import java.util.List;

import javax.inject.Inject;
import javax.websocket.server.PathParam;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.BoardService;

import lombok.Delegate;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/board/*")
@Controller
public class BoardController {

	// 폴더명 : board / mapping : board
	// maping => board/register
	// 목적지 ->/board/register
	@Inject
	private BoardService bsv;

	@Inject
	private FileHandler fh;

	@GetMapping("/register")
	public String boardRegisterGet() {

		log.info("글쓰기 시작");
		return "/board/register";
	}

	@PostMapping("/register")
	public String postRegister(BoardVO bvo, RedirectAttributes reAttr,
			@RequestParam(name = "files", required = false) MultipartFile[] files) {
		log.info(">>>>bvo//files" + bvo + "  " + files);

		List<FileVO> flist = null;
		// file upload handler 생성
		if (files[0].getSize() > 0) {
			flist = fh.uploadFiles(files);
		}

		int isOk = bsv.register(new BoardDTO(bvo, flist));

		log.info(">>>>> board register" + (isOk > 0 ? "글등록 성공" : "글등록 실패"));

		return "redirect:/board/list";

	}
//paging 추가
	/*
	 * @GetMapping("list") public String list(Model model, BoardVO bvo) {
	 * 
	 * List<BoardVO> list = bsv.getList(bvo); model.addAttribute("list", list);
	 * 
	 * return "/board/list";
	 * 
	 * }
	 */

	@GetMapping("list")
	public void list(Model model, PagingVO PagingVO) {

		log.info(">>>>>pagingVO>>" + PagingVO);
		model.addAttribute("list", bsv.getList(PagingVO));

		// 페이징 처리
		// 총 페이지 갯수 => totalCount (검색포함)
		int totalCount = bsv.getTotalCount(PagingVO);

		PagingHandler ph = new PagingHandler(PagingVO, totalCount);
		model.addAttribute("ph", ph);
	}

	@GetMapping({ "detail", "modify" })
	public void detail(Model model, @RequestParam("bno") long bno) {
		log.info(">>>>>detail bno" + bno);
		/* BoardVO bvo = bsv.getDetail(bno); */
		/*
		 * FileVO fvo = bsv.getDetail_f(bno)
		 * 
		 * ;
		 */
		BoardDTO bdto = bsv.getDetailFile(bno);
		model.addAttribute("bdto", bdto);

		/* model.addAttribute("FileVO", fvo); */
	}

	@PostMapping("modify")
	public String postModify(BoardVO bvo, RedirectAttributes reAttr,
			@RequestParam(name = "files", required = false) MultipartFile[] files) {
		log.info(">>>>>" + bvo.toString());
		/* int isOk = bsv.modify(bvo); */
		/*
		 * reAttr.addAttribute("bno", bvo.getBno()); reAttr.addFlashAttribute("isMod",
		 * isOk);
		 */
		List<FileVO> flist = null;
		// file upload handler 생성

		if (files != null && files.length > 0 && files[0].getSize() > 0) {
		    // 파일이 업로드된 경우에만 아래 코드를 실행
		    flist = fh.uploadFiles(files);
		}

		int isOk = bsv.modifyFiles(new BoardDTO(bvo, flist));
		
		log.info(">>>>> board modify" + (isOk > 0 ? "글 수정 성공" : " 글 수정 실패"));
		return "redirect:/board/detail?bno=" + bvo.getBno();

	}

	@GetMapping("/delete")
	public String delete(@RequestParam("bno") int bno, RedirectAttributes reAttr) {
		log.info(">>>>>delete bno" + bno);
		int isOk = bsv.delete(bno);
		log.info(">>>>> board modify" + (isOk > 0 ? "글 삭제 성공" : " 글 삭제 실패"));
		return "redirect:/board/list";

	}
@DeleteMapping(value = "/file/{uuid}", produces = MediaType.TEXT_PLAIN_VALUE)
public ResponseEntity<String> removeFile(@PathVariable("uuid")String uuid){
	log.info(">>>>uuid>>"+uuid);
	int isOk = 0;
	isOk = bsv.delete_f(uuid);
	return isOk > 0? new ResponseEntity<String>("1", HttpStatus.OK)
			: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
}
	

}
